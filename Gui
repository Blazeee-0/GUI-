
import java.io.IOException;
import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;


public class FXDriver extends Application {
	   
	/**
	 * The main method for the GUI example program JavaFX version
	 * @param args not used
	 * @throws IOException
	 */
	public static void main(String[] args) {
		launch(args);   
	}
		   
	@Override
	public void start(Stage stage) throws IOException {
		//student Task #1:
		//  instantiate the FXMainPane, name it root
		//  set the scene to hold root
		//set stage title
		FXMainPane root = new FXMainPane(); 
		stage.setScene(new Scene(root,700,480));
		stage.setTitle("Hello World GUI");
		//display the stage
		stage.show();

	}
}

 */
public class DataManager {
    
	DataManager() {	}

	/** 
	 * This method illustrates how the GUI can interact with the manager
	 */
	public String getHello() {
		return "Hello World";
	}

	public String getHowdy() {
		return "Howdy y'all";
	}

	public String getChinese() {
		return "Ni hau";
	}
    public String getFrench() {
    	return "Bonjur";
    }

}

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;

/**
 * This panel is the basic panel, inside which other panels are placed.  
 * Before beginning to implement, design the structure of your GUI in order to 
 * understand what panels go inside which ones, and what buttons or other components
 * go in which panels.  
 * @author ralexander
 *
 */
//make the main panel's layout be a VBox
public class FXMainPane extends VBox {

	//student Task #2:
	//  declare five buttons, a label, and a textfield
	//  declare two HBoxes
	Button hello, howdy, chinese, clear, exit, bonjur; 
	Label feedback; 
	TextField textfield; 
	HBox hbox1, hbox2; 
	
	//student Task #4:
	//  declare an instance of DataManager
	/**
	 * The MainPanel constructor sets up the entire GUI in this approach.  Remember to
	 * wait to add a component to its containing component until the container has
	 * been created.  This is the only constraint on the order in which the following 
	 * statements appear.
	 */
	DataManager datamanagerInstance; 
	
	FXMainPane() {
		//student Task #2:
		//  instantiate the buttons, label, and textfield
		//  instantiate the HBoxes
		hello = new Button("Hello"); 
		howdy = new Button("Howdy"); 
		chinese = new Button("Chinese"); 
		clear = new Button("Clear");
		exit = new Button("Exit"); 
		bonjur = new Button("Bonjur");//French "hello"
		feedback = new Label("Feedback");
		textfield = new TextField();
		
		hbox1 = new HBox();
		hbox2 = new HBox(); 
		//student Task #4:
		//  instantiate the DataManager instance
		//  set margins and set alignment of the components
		datamanagerInstance = new DataManager(); 
		
		HBox.setMargin(bonjur, new Insets(30));
		HBox.setMargin(hello,   new Insets(30));
		HBox.setMargin(howdy,   new Insets(30));
		HBox.setMargin(chinese, new Insets(30));
		HBox.setMargin(clear, new Insets(30));
		HBox.setMargin(exit, new Insets(30));
		
		hbox1.setAlignment(Pos.CENTER);
		hbox2.setAlignment(Pos.CENTER);
		
		bonjur.setOnAction(new ButtonHandler());
		hello.setOnAction(new ButtonHandler());
		howdy.setOnAction(new ButtonHandler());
		chinese.setOnAction(new ButtonHandler());
		clear.setOnAction(new ButtonHandler());
		exit.setOnAction(new ButtonHandler());
		//student Task #3:
		//  add the label and textfield to one of the HBoxes
		//  add the buttons to the other HBox
		//  add the HBoxes to this FXMainPanel (a VBox)
		hbox1.getChildren().addAll(hello, howdy, chinese, clear, exit,bonjur);
		hbox2.getChildren().addAll(feedback, textfield);
		getChildren().addAll(hbox1,hbox2);
		

	}
	
	//Task #4:
	//  create a private inner class to handle the button clicks
   private class ButtonHandler implements EventHandler<ActionEvent>{

	   
	   public void handle(ActionEvent j) {
		   if (j.getTarget()==hello) {
			   
			   textfield.setText(datamanagerInstance.getHello());
		   }
		   else if (j.getTarget()==howdy) {
			   textfield.setText(datamanagerInstance.getHowdy());
			   }
		   else if (j.getTarget()==chinese) {
				   textfield.setText(datamanagerInstance.getChinese());
			   }
		   else if (j.getTarget()==bonjur) {
			   textfield.setText(datamanagerInstance.getFrench());
		   }
			     
		   else if (j.getTarget()==clear) {
			   textfield.setText("");
			   }
		   else if (j.getTarget()==exit) {
			   Platform.exit();
			   System.exit(0);
		}
    	
   
	   }
   }
}
